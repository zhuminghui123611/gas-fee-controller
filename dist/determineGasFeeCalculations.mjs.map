{"version":3,"file":"determineGasFeeCalculations.mjs","sourceRoot":"","sources":["../src/determineGasFeeCalculations.ts"],"names":[],"mappings":"AAOA,OAAO,EAAE,kBAAkB,EAAE,+BAA2B;AA8BxD;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,MAAM,CAAC,OAAO,CAAC,KAAK,UAAU,2BAA2B,CACvD,IAAwC;IAExC,IAAI;QACF,OAAO,MAAM,0BAA0B,CAAC,IAAI,CAAC,CAAC;KAC/C;IAAC,OAAO,KAAK,EAAE;QACd,IAAI,KAAK,YAAY,KAAK,EAAE;YAC1B,MAAM,IAAI,KAAK,CACb,6CAA6C,KAAK,CAAC,OAAO,EAAE,CAC7D,CAAC;SACH;QAED,MAAM,KAAK,CAAC;KACb;AACH,CAAC;AAED;;;;GAIG;AACH,KAAK,UAAU,0BAA0B,CACvC,OAA2C;IAE3C,MAAM,EACJ,mBAAmB,EACnB,wBAAwB,EACxB,wBAAwB,GACzB,GAAG,OAAO,CAAC;IAEZ,IAAI;QACF,IAAI,mBAAmB,IAAI,CAAC,wBAAwB,EAAE;YACpD,OAAO,MAAM,kCAAkC,CAAC,OAAO,CAAC,CAAC;SAC1D;QAED,IAAI,wBAAwB,IAAI,CAAC,wBAAwB,EAAE;YACzD,OAAO,MAAM,+BAA+B,CAAC,OAAO,CAAC,CAAC;SACvD;QAED,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;KACvE;IAAC,MAAM;QACN,OAAO,MAAM,yBAAyB,CAAC,OAAO,CAAC,CAAC;KACjD;AACH,CAAC;AAED;;;;GAIG;AACH,KAAK,UAAU,kCAAkC,CAC/C,OAA2C;IAE3C,MAAM,EACJ,iBAAiB,EACjB,oBAAoB,EACpB,QAAQ,EACR,qBAAqB,GACtB,GAAG,OAAO,CAAC;IAEZ,MAAM,SAAS,GAAG,MAAM,iBAAiB,CAAC,oBAAoB,EAAE,QAAQ,CAAC,CAAC;IAE1E,MAAM,EAAE,6BAA6B,EAAE,qBAAqB,EAAE,GAC5D,SAAS,CAAC,MAAM,CAAC;IAEnB,MAAM,yBAAyB,GAAG,qBAAqB,CACrD,6BAA6B,EAC7B,qBAAqB,EACrB,SAAS,CACV,CAAC;IAEF,OAAO;QACL,eAAe,EAAE,SAAS;QAC1B,yBAAyB;QACzB,eAAe,EAAE,kBAAkB,CAAC,UAAU;KAC/C,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,KAAK,UAAU,+BAA+B,CAC5C,OAA2C;IAE3C,MAAM,EACJ,4BAA4B,EAC5B,+BAA+B,EAC/B,QAAQ,GACT,GAAG,OAAO,CAAC;IAEZ,MAAM,SAAS,GAAG,MAAM,4BAA4B,CAClD,+BAA+B,EAC/B,QAAQ,CACT,CAAC;IAEF,OAAO;QACL,eAAe,EAAE,SAAS;QAC1B,yBAAyB,EAAE,EAAE;QAC7B,eAAe,EAAE,kBAAkB,CAAC,MAAM;KAC3C,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,KAAK,UAAU,yBAAyB,CACtC,OAA2C;IAE3C,MAAM,EAAE,QAAQ,EAAE,wBAAwB,EAAE,GAAG,OAAO,CAAC;IAEvD,MAAM,SAAS,GAAG,MAAM,wBAAwB,CAAC,QAAQ,CAAC,CAAC;IAE3D,OAAO;QACL,eAAe,EAAE,SAAS;QAC1B,yBAAyB,EAAE,EAAE;QAC7B,eAAe,EAAE,kBAAkB,CAAC,YAAY;KACjD,CAAC;AACJ,CAAC","sourcesContent":["import type {\n  EstimatedGasFeeTimeBounds,\n  EthGasPriceEstimate,\n  GasFeeEstimates,\n  GasFeeState as GasFeeCalculations,\n  LegacyGasPriceEstimate,\n} from './GasFeeController';\nimport { GAS_ESTIMATE_TYPES } from './GasFeeController';\n\ntype DetermineGasFeeCalculationsRequest = {\n  isEIP1559Compatible: boolean;\n  isLegacyGasAPICompatible: boolean;\n  fetchGasEstimates: (\n    url: string,\n    clientId?: string,\n  ) => Promise<GasFeeEstimates>;\n  fetchGasEstimatesUrl: string;\n  fetchLegacyGasPriceEstimates: (\n    url: string,\n    clientId?: string,\n  ) => Promise<LegacyGasPriceEstimate>;\n  fetchLegacyGasPriceEstimatesUrl: string;\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  fetchEthGasPriceEstimate: (ethQuery: any) => Promise<EthGasPriceEstimate>;\n  calculateTimeEstimate: (\n    maxPriorityFeePerGas: string,\n    maxFeePerGas: string,\n    gasFeeEstimates: GasFeeEstimates,\n  ) => EstimatedGasFeeTimeBounds;\n  clientId: string | undefined;\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ethQuery: any;\n  nonRPCGasFeeApisDisabled?: boolean;\n};\n\n/**\n * Obtains a set of max base and priority fee estimates along with time estimates so that we\n * can present them to users when they are sending transactions or making swaps.\n *\n * @param args - The arguments.\n * @param args.isEIP1559Compatible - Governs whether or not we can use an EIP-1559-only method to\n * produce estimates.\n * @param args.isLegacyGasAPICompatible - Governs whether or not we can use a non-EIP-1559 method to\n * produce estimates (for instance, testnets do not support estimates altogether).\n * @param args.fetchGasEstimates - A function that fetches gas estimates using an EIP-1559-specific\n * API.\n * @param args.fetchGasEstimatesUrl - The URL for the API we can use to obtain EIP-1559-specific\n * estimates.\n * @param args.fetchLegacyGasPriceEstimates - A function that fetches gas estimates using an\n * non-EIP-1559-specific API.\n * @param args.fetchLegacyGasPriceEstimatesUrl - The URL for the API we can use to obtain\n * non-EIP-1559-specific estimates.\n * @param args.fetchEthGasPriceEstimate - A function that fetches gas estimates using\n * `eth_gasPrice`.\n * @param args.calculateTimeEstimate - A function that determine time estimate bounds.\n * @param args.clientId - An identifier that an API can use to know who is asking for estimates.\n * @param args.ethQuery - An EthQuery instance we can use to talk to Ethereum directly.\n * @param args.nonRPCGasFeeApisDisabled - Whether to disable requests to the legacyAPIEndpoint and the EIP1559APIEndpoint\n * @returns The gas fee calculations.\n */\nexport default async function determineGasFeeCalculations(\n  args: DetermineGasFeeCalculationsRequest,\n): Promise<GasFeeCalculations> {\n  try {\n    return await getEstimatesUsingFallbacks(args);\n  } catch (error) {\n    if (error instanceof Error) {\n      throw new Error(\n        `Gas fee/price estimation failed. Message: ${error.message}`,\n      );\n    }\n\n    throw error;\n  }\n}\n\n/**\n * Retrieve the gas fee estimates using a series of fallback mechanisms.\n * @param request - The request object.\n * @returns The gas fee estimates.\n */\nasync function getEstimatesUsingFallbacks(\n  request: DetermineGasFeeCalculationsRequest,\n): Promise<GasFeeCalculations> {\n  const {\n    isEIP1559Compatible,\n    isLegacyGasAPICompatible,\n    nonRPCGasFeeApisDisabled,\n  } = request;\n\n  try {\n    if (isEIP1559Compatible && !nonRPCGasFeeApisDisabled) {\n      return await getEstimatesUsingFeeMarketEndpoint(request);\n    }\n\n    if (isLegacyGasAPICompatible && !nonRPCGasFeeApisDisabled) {\n      return await getEstimatesUsingLegacyEndpoint(request);\n    }\n\n    throw new Error('Main gas fee/price estimation failed. Use fallback');\n  } catch {\n    return await getEstimatesUsingProvider(request);\n  }\n}\n\n/**\n * Retrieve gas fee estimates using the EIP-1559 endpoint of the gas API.\n * @param request - The request object.\n * @returns The gas fee estimates.\n */\nasync function getEstimatesUsingFeeMarketEndpoint(\n  request: DetermineGasFeeCalculationsRequest,\n): Promise<GasFeeCalculations> {\n  const {\n    fetchGasEstimates,\n    fetchGasEstimatesUrl,\n    clientId,\n    calculateTimeEstimate,\n  } = request;\n\n  const estimates = await fetchGasEstimates(fetchGasEstimatesUrl, clientId);\n\n  const { suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas } =\n    estimates.medium;\n\n  const estimatedGasFeeTimeBounds = calculateTimeEstimate(\n    suggestedMaxPriorityFeePerGas,\n    suggestedMaxFeePerGas,\n    estimates,\n  );\n\n  return {\n    gasFeeEstimates: estimates,\n    estimatedGasFeeTimeBounds,\n    gasEstimateType: GAS_ESTIMATE_TYPES.FEE_MARKET,\n  };\n}\n\n/**\n * Retrieve gas fee estimates using the legacy endpoint of the gas API.\n * @param request - The request object.\n * @returns The gas fee estimates.\n */\nasync function getEstimatesUsingLegacyEndpoint(\n  request: DetermineGasFeeCalculationsRequest,\n): Promise<GasFeeCalculations> {\n  const {\n    fetchLegacyGasPriceEstimates,\n    fetchLegacyGasPriceEstimatesUrl,\n    clientId,\n  } = request;\n\n  const estimates = await fetchLegacyGasPriceEstimates(\n    fetchLegacyGasPriceEstimatesUrl,\n    clientId,\n  );\n\n  return {\n    gasFeeEstimates: estimates,\n    estimatedGasFeeTimeBounds: {},\n    gasEstimateType: GAS_ESTIMATE_TYPES.LEGACY,\n  };\n}\n\n/**\n * Retrieve gas fee estimates using an `eth_gasPrice` call to the RPC provider.\n * @param request - The request object.\n * @returns The gas fee estimates.\n */\nasync function getEstimatesUsingProvider(\n  request: DetermineGasFeeCalculationsRequest,\n): Promise<GasFeeCalculations> {\n  const { ethQuery, fetchEthGasPriceEstimate } = request;\n\n  const estimates = await fetchEthGasPriceEstimate(ethQuery);\n\n  return {\n    gasFeeEstimates: estimates,\n    estimatedGasFeeTimeBounds: {},\n    gasEstimateType: GAS_ESTIMATE_TYPES.ETH_GASPRICE,\n  };\n}\n"]}